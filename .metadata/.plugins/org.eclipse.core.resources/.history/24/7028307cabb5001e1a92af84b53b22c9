package com.ezen.project.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.authentication.AuthenticationFailureHandler;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;

import com.ezen.project.security.CustomAuthMemberService;
import com.ezen.project.security.LoginFailureHandler;
import com.ezen.project.security.LoginSuccessHandler;

import lombok.extern.slf4j.Slf4j;

//WebSecurityConfigurerAdapter �긽�냽 諛쏆븘 �솚寃쎌꽕�젙.
//WebConfig�뿉 securityConfig.class �벑濡�.
@Slf4j
@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter{

   //鍮꾨�踰덊샇 �븫�샇�솕 媛앹껜 PasswordEncoder
   @Bean
   public PasswordEncoder bcPasswordEncoder() {
      return new BCryptPasswordEncoder();
   }
   
   //SuccessHandler 鍮� �깮�꽦=> �궗�슜�옄 而ㅼ뒪�� �깮�꽦
   @Bean
   public AuthenticationSuccessHandler authSuccessHandler() {
      return new LoginSuccessHandler();
   }
   
   //FailureHandler 鍮� �깮�꽦=> �궗�슜�옄 而ㅼ뒪�� �깮�꽦
   @Bean
   public AuthenticationFailureHandler authFailureHandler() {
      return new LoginFailureHandler();
   }
   
   
   //UserDetail 鍮� �깮�꽦 => �궗�슜�옄 而ㅼ뒪�� �깮�꽦
   @Bean
   public UserDetailsService customUserService() {
      return new CustomAuthMemberService();
   }

   
   @Override
   protected void configure(AuthenticationManagerBuilder auth) throws Exception {
      // �씤利� �릺�뒗 媛앹껜 �꽕�젙
      auth.userDetailsService(customUserService())
      .passwordEncoder(bcPasswordEncoder());
   }
   
   @Override
   protected void configure(HttpSecurity http) throws Exception {
      // �솕硫댁뿉�꽌 �꽕�젙�릺�뒗 沅뚰븳�뿉 �뵲瑜� 二쇱냼 Mapping �꽕�젙
      // csrf() 怨듦꺽�뿉 ���븳 �꽕�젙 留됯린
      http.csrf().disable();
      
      // �듅�씤 �슂泥��궗�빆
      // antMatchers : �젒洹쇱쓣 �뿀�슜�븯�뒗 媛�
      // permitAll() : �늻援щ굹 �젒洹� 媛��뒫�븳 寃쎈줈
      // authenticated : �씤利앸맂 �궗�슜�옄留� 媛��뒫
      http.authorizeRequests()
      .antMatchers("/member/list").hasRole("ADMIN")
      .antMatchers("/","/board/list","/board/detail","/comment/**","/upload/**","/resources/**","/member/register","/member/login","/member/modify","/member/list").permitAll()
      .anyRequest().authenticated();
      
      // 而ㅼ뒪�� 濡쒓렇�씤 �럹�씠吏�瑜� 援ъ꽦
      // Controller�뿉 二쇱냼�슂泥� 留듯븨�씠 媛숈씠 �엳�뼱�빞 �븿.(�븘�닔)
      http.formLogin()
      .usernameParameter("email")
      .passwordParameter("pwd")
      .loginPage("/member/login")
      .successHandler(authSuccessHandler())
      .failureHandler(authFailureHandler());
      
      // 濡쒓렇�븘�썐 �럹�씠吏�
      // 諛섎뱶�떆 method = "post"
      http.logout()
      .logoutUrl("/member/logout")
      .invalidateHttpSession(true)
      .deleteCookies("JSESSIONID")
      .logoutSuccessUrl("/");
      
   }

}